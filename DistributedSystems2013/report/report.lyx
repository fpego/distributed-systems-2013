#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Clock synchronization
\end_layout

\begin_layout Author
Dario Brazzi, Francesco Pegoraro
\end_layout

\begin_layout Date
March 04, 2013
\end_layout

\begin_layout Abstract
Implement in Java a clock synchronization primitive.
 Choose the strategy that you think best to synchronize the clock of a requestin
g machine against that of a reference (server) machine.
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Part
Problem description
\end_layout

\begin_layout Section
Problem analysis
\end_layout

\begin_layout Standard
The goal of this project is to create a Java server providing a clock synchroniz
ation primitive.
\end_layout

\begin_layout Standard
The server must implement at least one standard protocol for clock synchronizati
on, possibly more than one.
 A suitable choice is the Cristian's algorithm.
 The server will reply to each query with the current time, provided by
 the OS.
\end_layout

\begin_layout Standard
The client must be able to ask to a server the current time and to receive
 it to be displayed it to the user.
\end_layout

\begin_layout Section
Assumptions
\end_layout

\begin_layout Itemize
For the Christian's algorithm, the network messages have comparable travel
 time, possibly identical.
\end_layout

\begin_layout Part
Solution description
\end_layout

\begin_layout Section
Cristian's algorithm
\end_layout

\begin_layout Standard
The simplest method to achieve clock synchronization is Cristian's algorithm.
 It requires a server who knows the correct time, a client that wants to
 synchronize its clock and a link between the client and the server.
\end_layout

\begin_layout Standard
The message exchange is the following:
\end_layout

\begin_layout Itemize
The client send a message to the server, requesting the current time, and
 starts a timer.
 
\begin_inset Formula $M{}_{1}$
\end_inset

= (REQ_TIME)
\end_layout

\begin_layout Itemize
The server receives message 
\begin_inset Formula $M_{1}$
\end_inset

and immediately starts a timer.
 Than, process the request, building the response which is constituted of
 the current time and the time interval needed to build the response.
 So, just before sending the response stops the timer, than put the timer
 value and the current time in the response and send the response back to
 the client.
 
\begin_inset Formula $M{}_{2}$
\end_inset

= (current_time, server_processing_time)
\end_layout

\begin_layout Itemize
The client receive message 
\begin_inset Formula $M{}_{2}$
\end_inset

from the server and stops its timer.
 Than, sets its current time to 
\begin_inset Newline newline
\end_inset

t = server_current_time + 
\begin_inset Formula $\frac{1}{2}$
\end_inset

(client_processing_time - server_processing_time)
\end_layout

\begin_layout Section
Program Design
\end_layout

\begin_layout Subsection
Server
\end_layout

\begin_layout Standard
The server must open a ServerSocket and listen to the first free port in
 the range [4444;4454].
 If no free port in this range is available, the server will shut down displayin
g an error.
\end_layout

\begin_layout Standard
After the server has registered, will wait any incoming message from any
 client, until it's shutdown.
\end_layout

\begin_layout Standard
When a message from a client is received, the response is delegated to a
 new thread of the server, such that is possible to reply to a new client
 before finishing previous requests.
 The new thread will receive the connection with the client and the timer
 started by the parent process, timer that will measure the time took by
 the server to serve the response.
 It will reply to the client with the most recent current time and the server
 processing time, eventually closing the socket with the client.
\end_layout

\begin_layout Standard
The server will expose the following methods:
\end_layout

\begin_layout Itemize

\emph on
setPort()
\emph default
: sets the server listening port to a specified value
\end_layout

\begin_layout Itemize

\emph on
getPort()
\emph default
: returns the current listening port, or the default one if not specified
\end_layout

\begin_layout Itemize

\emph on
startServer()
\emph default
: starts the server and opens a ServerSocket on the specified port.
 If the port is not specified, use one in the range [4444;4454].
\end_layout

\begin_layout Itemize

\emph on
stopServer()
\emph default
: if the server is active, stop it and close the open socket.
\end_layout

\begin_layout Subsection
Client
\end_layout

\begin_layout Standard
The client must be able to connect to a specified server on a specified
 port, sending a message requesting the current time and receiving it.
 The time will be presented to the user in the following format: 
\begin_inset Quotes eld
\end_inset

dd/MM/yyyy hh:mm:ss SSS
\begin_inset Quotes erd
\end_inset

, for example 
\begin_inset Quotes eld
\end_inset

15/03/2013 15:06:22 598
\begin_inset Quotes erd
\end_inset

.
 The client can also get the current time as milliseconds passed since 01/01/197
0, also called 
\begin_inset Quotes eld
\end_inset

unix time
\begin_inset Quotes erd
\end_inset

, which is useful in many situations.
\end_layout

\begin_layout Standard
The client will expose the following methods:
\end_layout

\begin_layout Itemize

\emph on
getCurrentTime()
\emph default
: returns the current time as Unix Time (milliseconds since 01/01/1970)
\end_layout

\begin_layout Itemize

\emph on
getCurrentTimeAsString()
\emph default
: returns the current time in the format 
\begin_inset Quotes eld
\end_inset

dd/MM/yyyy hh:mm:ss SSS
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize

\emph on
setPort()
\emph default
: sets the port to which the client will connect to the server
\end_layout

\begin_layout Itemize

\emph on
getPort()
\emph default
: returns the current clock server port
\end_layout

\begin_layout Itemize

\emph on
setServer()
\emph default
: sets the name or the IP address of the clock server
\end_layout

\begin_layout Itemize

\emph on
getServer()
\emph default
: returns the current name or IP address of the clock server
\end_layout

\begin_layout Subsection
Comunication Protocol
\end_layout

\begin_layout Standard
The protocol defines the role of each agent, in this case the client and
 the server, and specifies the rules to excange messages between the client
 and the server.
\end_layout

\begin_layout Subsubsection
Server protocol
\end_layout

\begin_layout Standard
The server reply to well formatted requests with the same response with
 the following format:
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<current_time_server><separator><elapsed_time_server>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Where
\end_layout

\begin_layout Itemize
<current_time_server> is a string containing the current time on the server,
 in milliseconds since Unix epoch (1 Jan 1970) (see 
\begin_inset Flex URL
status collapsed

\begin_layout Plain Layout

http://en.wikipedia.org/wiki/Unix_time
\end_layout

\end_inset

)
\end_layout

\begin_layout Itemize
<separator> is a string (or a char) separating the two values.
 It must not be a number.
 For example, it can be the string 
\begin_inset Quotes eld
\end_inset

:
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
<elapsed_time_server> is a string containing the time elapsed on the server
 while the response was being served, in nanoseconds.
\end_layout

\begin_layout Standard
An example of a possible response is the following: 
\emph on

\begin_inset listings
inline false
status open

\begin_layout Plain Layout

1363964626096:8347760
\end_layout

\end_inset


\end_layout

\begin_layout Standard
A request is well formatted if the received message is equal to one of the
 two messages described in the Client Protocol section, one for Simple request
 and one for Full request.
\end_layout

\begin_layout Standard
If a request is not well formatted the message 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

ERROR! Request not valid.
\end_layout

\end_inset

is sent back to the client,
\end_layout

\begin_layout Subsubsection
Client protocol
\end_layout

\begin_layout Standard
The client has two types of requests: 
\emph on
Simple
\emph default
 and 
\emph on
Full
\emph default
.
\end_layout

\begin_layout Paragraph
The Simple request
\end_layout

\begin_layout Standard
A simple request is composed of just a request followed by the server response.
 The request is a single message, as defined in the following line
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

REQ SIMPLE SYNC
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The client must start a timer 
\begin_inset Formula $t$
\end_inset

 before sending the message to the server, stopping 
\begin_inset Formula $t$
\end_inset

 as soon as the response is received, storing the time elapsed in the variable
 
\begin_inset Formula $timeElapsedClient$
\end_inset

.
 The timer should have a sensibility of nanoseconds, like the server's.
\end_layout

\begin_layout Standard
The client should obtain a message from the server in the format 
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

<current_time_server><separator><elapsed_time_server>
\end_layout

\end_inset


\end_layout

\begin_layout Standard
The real current client time is calculated with the formula 
\begin_inset Formula $time=currentTimeServer+messageTravelTime$
\end_inset

, where 
\begin_inset Formula $messageTravelTime=(timeElapsedClient-timeElapsedServer)/2000$
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Formula $time$
\end_inset

 is the real current time on the client, espressed in milliseconds since
 Unix epoch
\end_layout

\begin_layout Itemize
\begin_inset Formula $currentTimeServer$
\end_inset

 is <current_time_server>, in milliseconds since Unix epoch
\end_layout

\begin_layout Itemize
\begin_inset Formula $messageTravelTime$
\end_inset

 is the time spent by a message on the network to go from the client to
 the server, or vice versa.
\end_layout

\begin_layout Itemize
\begin_inset Formula $timeElapsedClient$
\end_inset

 and 
\begin_inset Formula $timeElapsedServer$
\end_inset

 are in nanoseconds.
 Their difference is equal to 
\begin_inset Formula $2*messageTravelTime$
\end_inset

, the total roundtrip time.
 Divided by 2000 it is equal to the time spent by one message to travel
 from the client to the server, in milliseconds.
 The fundamental assumption is that the network travel times are comparable,
 e.g.
 there are no important disequalities.
\end_layout

\begin_layout Paragraph
The Full request
\end_layout

\begin_layout Standard
A Full request is simply the repetition of a Simple request 
\begin_inset Formula $N$
\end_inset

 times, with 
\begin_inset Formula $1<N<50$
\end_inset

, where the 
\begin_inset Formula $currentTimeServer$
\end_inset

 used is the one in the last message and 
\begin_inset Formula $messageTravelTime$
\end_inset

 is the mean of all the 
\begin_inset Formula $messageTravelTime_{i}$
\end_inset

 present in the requests, 
\begin_inset Formula $i\in[1,N]$
\end_inset

.
\end_layout

\begin_layout Standard
In a formula, given 
\begin_inset Formula $i\in[1,N]$
\end_inset

 is the response index, 
\begin_inset Formula $time=currentTimeServer_{N}+\frac{\sum_{i=1}^{N}messageTravelTime_{i}}{N}$
\end_inset

, where 
\begin_inset Formula $messageTravelTime_{i}=(timeElapsedClient_{i}-timeElapsedServer_{i})/2000$
\end_inset

.
\end_layout

\begin_layout Standard
Between two requests the client should wait at least 100 milliseconds to
 do not falsate the measure.
\end_layout

\begin_layout Section
Conclusions
\end_layout

\begin_layout Standard
The program has been succesfully implemented in Java.
\end_layout

\begin_layout Standard
SyncServer is the server, where it can be specified the listening port,
 where it will listen until it's terminated.
\end_layout

\begin_layout Standard
SyncClient is the client.
 It requires the server IP (or logical name) and its port, then it will
 request the current time to the server and display to the user.
\end_layout

\begin_layout Standard
Both are console applications and can be invoked with the command 
\emph on
java -jar [JarName]
\emph default
.
\end_layout

\end_body
\end_document
